import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';

import '../../common/Constants.dart';

class EquipmentDetails {
  String documentId = '';
  String name = '';
  String serialNumber = '';
  String model = '';
  String details = '';
  String address = '';
  String userManagerCode = '';
  String? userAdminCode = '';
  String? userManagerName = '';
  String userAdminName = '';
  List<String> photoPaths = [];
  List<String> photoUrls = [];
  String warrantyPeriodInYears = "";
  String scheduleMaintenancePeriodInDays = "";
  Timestamp? purchaseDate;
  bool isHavingPeriodicMaintenance = false;
  Timestamp? lastAutoCreatedServiceDiagnisedDate;
  bool isIdle = false;
  bool isCurrentlyHavingIssue = false;
  bool isMarkedAsDeleted = false;

  EquipmentDetails.fromSnapshot(Map<String, dynamic> snapshot) {
    documentId =
        snapshot.containsKey(documentIdKey) ? snapshot[documentIdKey] : '';
    name = snapshot.containsKey(nameKey) ? snapshot[nameKey] : '';
    serialNumber =
        snapshot.containsKey(serialNumberKey) ? snapshot[serialNumberKey] : '';
    model = snapshot.containsKey(modelKey) ? snapshot[modelKey] : '';
    purchaseDate =
        snapshot.containsKey(purchaseDateKey) ? snapshot[purchaseDateKey] : '';
    details = snapshot.containsKey(detailsKey) ? snapshot[detailsKey] : '';
    address = snapshot.containsKey(addressKey) ? snapshot[addressKey] : '';
    userManagerCode = snapshot.containsKey(userManagerCodeKey)
        ? snapshot[userManagerCodeKey]
        : '';
    userManagerName = snapshot.containsKey(userManagerNameKey)
        ? snapshot[userManagerNameKey]
        : '';
    userAdminCode = snapshot.containsKey(userAdminCodeKey)
        ? snapshot[userAdminCodeKey]
        : '';
    userAdminName = snapshot.containsKey(userAdminNameKey)
        ? snapshot[userAdminNameKey]
        : '';
    if (snapshot.containsKey(photoUrlsKey)) {
      photoUrls = List<String>.from(snapshot[photoUrlsKey]);
    } else {
      photoUrls = List.empty();
    }
    warrantyPeriodInYears = snapshot.containsKey(warrantyPeriodInYearsKey)
        ? snapshot[warrantyPeriodInYearsKey]
        : '';
    isHavingPeriodicMaintenance =
        snapshot.containsKey(isHasPeriodicMaintenanceKey)
            ? snapshot[isHasPeriodicMaintenanceKey]
            : false;
    scheduleMaintenancePeriodInDays =
        snapshot.containsKey(scheduleMaintenancePeriodInDaysKey)
            ? snapshot[scheduleMaintenancePeriodInDaysKey]
            : '';
    purchaseDate = snapshot.containsKey(purchaseDateKey)
        ? snapshot[purchaseDateKey]
        : null;
    lastAutoCreatedServiceDiagnisedDate =
        snapshot.containsKey(lastAutoCreatedServiceDiagnisedDateKey)
            ? snapshot[lastAutoCreatedServiceDiagnisedDateKey]
            : null;
    isIdle = snapshot.containsKey(isIdleKey) ? snapshot[isIdleKey] : false;
    isCurrentlyHavingIssue = snapshot.containsKey(isCurrentlyHavingIssueKey)
        ? snapshot[isCurrentlyHavingIssueKey] ?? false
        : false;
    isMarkedAsDeleted = snapshot.containsKey(markedAsDeletedKey)
        ? snapshot[markedAsDeletedKey] ?? false
        : false;
    // var lastAutoGeneratedMaintananceDateTimeStamp =
    //     snapshot.containsKey(lastAutoCreatedServiceDiagnisedDateKey)
    //         ? snapshot[lastAutoCreatedServiceDiagnisedDateKey]
    //         : null;
    // if (lastAutoGeneratedMaintananceDateTimeStamp != null) {
    //   if(lastAutoGeneratedMaintananceDateTimeStamp is Timestamp){
    //     lastAutoCreatedServiceDiagnisedDate =
    //         (lastAutoGeneratedMaintananceDateTimeStamp as Timestamp)
    //             .toDate().toString();
    //   }else if(lastAutoGeneratedMaintananceDateTimeStamp is String){
    //     lastAutoCreatedServiceDiagnisedDate = lastAutoGeneratedMaintananceDateTimeStamp;
    //   }
    // }
  }

  Map<String, dynamic> toSnapShot() {
    return {
      documentIdKey: documentId,
      nameKey: name,
      serialNumberKey: serialNumber,
      modelKey: model,
      detailsKey: details,
      addressKey: address,
      userManagerCodeKey: userManagerCode,
      userManagerNameKey: userManagerName,
      userAdminCodeKey: userAdminCode,
      userAdminNameKey: userAdminName,
      photoUrlsKey: photoUrls,
      warrantyPeriodInYearsKey: warrantyPeriodInYears,
      isHasPeriodicMaintenanceKey: isHavingPeriodicMaintenance,
      scheduleMaintenancePeriodInDaysKey: scheduleMaintenancePeriodInDays,
      purchaseDateKey: purchaseDate,
      isIdleKey: isIdle,
      isCurrentlyHavingIssueKey: isCurrentlyHavingIssue,
      lastAutoCreatedServiceDiagnisedDateKey:
          lastAutoCreatedServiceDiagnisedDate,
      markedAsDeletedKey: isMarkedAsDeleted,
    };
  }

  EquipmentDetails() {}

  getWorkingStatus() {
    if (isCurrentlyHavingIssue) {
      return 'Not Working';
    }

    if (isIdle) {
      return 'Idle';
    }

    return 'Working';
  }

  getWorkingStatusColor() {
    if (isCurrentlyHavingIssue) {
      return Colors.red;
    }

    if (isIdle) {
      return Colors.blue;
    }

    return Colors.green;
  }
}
