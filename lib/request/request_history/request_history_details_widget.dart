import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';

import '../../common/CommonWidgets.dart';
import '../../common/Constants.dart';
import '../../common/Extentions.dart';
import '../Model/RequestDetails.dart';

class RequestHistoryDetailsWidget extends StatelessWidget {
  late RequestDetails details;

  RequestHistoryDetailsWidget(this.details);

  // RequestDetailsController controller = Get.put(RequestDetailsController());

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
        appBar: AppBar(title: Text('Request Details')),
        body: SingleChildScrollView(
          child: Container(
            child: _getBody(),
          ),
        ),
      ),
    );
    // return Center(child: Text(requestDetails.title),);
  }

  _getBody() {
    return Column(
      mainAxisAlignment: MainAxisAlignment.start,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        getCommonSectionHeaderWidget(
            _getTitleForRequest(details), Alignment.center),
        getCommonLabelWidget(details.getReferenceNumberText(), 'Ref.No'),
        // getCommonLabelWidget(details.title, 'Issue'),
        getCommonLabelWidget(
            getStringFromTimestamp(details.createdDate), CCreatedDate),
        getCommonLabelWidget(details.equipment?.name, CEquipmentName),
        if (details.isAutoGenerated)
          getCommonLabelWidget(
              details.equipment?.scheduleMaintenancePeriodInDays,
              CScheduledMaintenancePeriodDays),
        getCommonLabelWidget(details.getAutogeneratedText(), CAutoGenerated),
        if (details.servicedDateTime == null)
          getCommonLabelWidget(details.getShortStatusText(), 'Status'),
        if (details.description.isNotEmpty == true)
          getCommonSectionWidget(details.title, details.description),
        if (details.requestPhotoUrls.isNotEmpty == true)
          getCommonRemoteImageWidget(
              details.requestPhotoUrls[0], "Issue image"),
        if (details.requestVideoUrls.isNotEmpty == true)
          getCommonRemoteVideoWidget(
              details.requestVideoUrls.first, "Issue Video"),
        if (details.scheduledDateTime != null)
          getCommonLabelWidget(
              getStringFromTimestamp(details.scheduledDateTime),
              CScheduledDate),
        if (details.servicedDateTime != null)
          getCommonLabelWidget(
              getStringFromTimestamp(details.servicedDateTime), CServicedDate),
        if (details.serviceEngineerName?.isNotEmpty == true)
          getCommonLabelWidget(details.serviceEngineerName, 'Service Done By'),
        if (details.servicedDateTime != null)
          getCommonLabelWidget(details.getResolvedStatus(), 'Status'),
        if (details.servicePhotoUrls.isNotEmpty == true)
          getCommonRemoteImageWidget(
              details.servicePhotoUrls[0], "Diagnosis image"),
        if (details.serviceEngineerComment.isNotEmpty == true)
          getCommonSectionWidget('Comment', details.serviceEngineerComment),
        if (details.reportPdfUrl != null) getCommonBackgroundWidget(24.0),
        // getCommonExpandedButton("Generate PDF", () {
        //   controller.generatePdfAction(details);
        // }),
        if (details.reportPdfUrl != null)
          getCommonRemotePdfFilePreviewSection(
              'Service Report', details.reportPdfUrl!),
        getCommonBackgroundWidget(24.0),
        getCommonBackActionButton("Ok"),
        getCommonBackgroundWidget(24.0),
      ],
    );
  }

  _getTitleForRequest(RequestDetails item) {
    var title = "";
    var reqStatus = item.status;
    if (reqStatus == RequestStatus.created.toString()) {
      title = item.isAutoGenerated
          ? 'Periodic Maintenance has been autogenerated on ${getStringFromTimestamp(item.createdDate)}'
          : 'Complaint has been registered on ${getStringFromTimestamp(item.createdDate)}';
    } else if (reqStatus == RequestStatus.scheduled.toString()) {
      title =
          'Site Visit is Scheduled on ${getStringFromTimestamp(item.scheduledDateTime)}';
    } else if (reqStatus == RequestStatus.diagonized.toString()) {
      title = item.isAutoGenerated
          ? 'Authorized maintenance report has been submitted by ${item.serviceEngineerName}.'
          : 'Authorized diagnosis report has been submitted by ${item.serviceEngineerName}.';
    } else if (reqStatus == RequestStatus.completed.toString()) {
      title = item.isAutoGenerated
          ? 'Periodic Maintenance has been marked as Completed'
          : 'Complaint has been marked as Completed';
    } else if (reqStatus == RequestStatus.ignored.toString()) {
      title = item.isAutoGenerated
          ? 'Periodic Maintenance has been marked as Ignored'
          : 'Complaint has been marked as Ignored';
    }
    return title;
  }
}

// class RequestDetailsController extends GetxController {
//   @override
//   void onInit() {
//     super.onInit();
//   }
//
//   @override
//   void onClose() {
//     super.onClose();
//   }
//
//   Future<void> generatePdfAction(RequestDetails details) async {
//     await Get.showOverlay<void>(
//         asyncFunction: () async {
//           var image1Path = details.requestPhotoUrls.isNotEmpty
//               ? details.requestPhotoUrls.first
//               : null;
//           var image2Path = details.servicePhotoUrls.isNotEmpty
//               ? details.servicePhotoUrls.first
//               : null;
//           ;
//
//           PdfDocument document = PdfDocument();
//           final page = document.pages.add();
//
//           var width = page.size.width;
//           var height = page.size.height;
//           var yValue = 0.0;
//
//           page.graphics.drawString(details.equipment?.name ?? "",
//               PdfStandardFont(PdfFontFamily.helvetica, 12),
//               bounds: Rect.fromLTWH(width / 2 - 125, yValue, 250, 30));
//           yValue += 35;
//
//           page.graphics.drawString('Title: ${details.title}',
//               PdfStandardFont(PdfFontFamily.helvetica, 12),
//               bounds: Rect.fromLTWH(0, yValue, 250, 30));
//           yValue += 35;
//
//           page.graphics.drawString('Description: ${details.description}',
//               PdfStandardFont(PdfFontFamily.helvetica, 12),
//               bounds: Rect.fromLTWH(0, yValue, 250, 100));
//           yValue += 105;
//
//           details.actions.forEach((element) {
//             page.graphics.drawString(
//                 element, PdfStandardFont(PdfFontFamily.helvetica, 12),
//                 bounds: Rect.fromLTWH(0, yValue, 250, 30));
//             yValue += 35;
//           });
//
//           // page.graphics.drawString(
//           //     'Registered Date&Time: ${getStringFromTimestamp(details.createdDate)}',
//           //     PdfStandardFont(PdfFontFamily.helvetica, 12),
//           //     bounds: Rect.fromLTWH(0, yValue, 250, 30));
//           // yValue += 35;
//           //
//           // page.graphics.drawString('Title: ${details.title}',
//           //     PdfStandardFont(PdfFontFamily.helvetica, 12),
//           //     bounds: Rect.fromLTWH(0, yValue, 250, 30));
//           // yValue += 35;
//           //
//           // page.graphics.drawString('Description: ${details.description}',
//           //     PdfStandardFont(PdfFontFamily.helvetica, 12),
//           //     bounds: Rect.fromLTWH(0, yValue, 250, 100));
//           // yValue += 105;
//           //
//           // if(details.status == RequestStatus.scheduled.toString()){
//           //   page.graphics.drawString(
//           //       'Scheduled Date&Time: ${getStringFromTimestamp(details.scheduledDateTime)}',
//           //       PdfStandardFont(PdfFontFamily.helvetica, 12),
//           //       bounds: Rect.fromLTWH(0, yValue, 250, 30));
//           //   yValue += 35;
//           //
//           //   page.graphics.drawString('Description: ${details.title}',
//           //       PdfStandardFont(PdfFontFamily.helvetica, 12),
//           //       bounds: Rect.fromLTWH(0, yValue, 250, 100));
//           //   yValue += 105;
//           //
//           // }
//           //
//           // if(details.status == RequestStatus.diagonized.toString()) {
//           //   page.graphics.drawString(
//           //       'Diagnosed Date&Time: ${getStringFromTimestamp(details.servicedDateTime)}',
//           //       PdfStandardFont(PdfFontFamily.helvetica, 12),
//           //       bounds: Rect.fromLTWH(0, yValue, 250, 30));
//           //   yValue += 35;
//           // }
//           //
//           // if(details.status == RequestStatus.completed.toString()) {
//           //   page.graphics.drawString(
//           //       'Approved Date&Time: ${getStringFromTimestamp(details.updatedDateTime)}',
//           //       PdfStandardFont(PdfFontFamily.helvetica, 12),
//           //       bounds: Rect.fromLTWH(0, yValue, 250, 30));
//           //   yValue += 35;
//           // }
//           //
//           // if(details.status == RequestStatus.ignored.toString()) {
//           //   page.graphics.drawString(
//           //       'Ignored Date&Time: ${getStringFromTimestamp(details.updatedDateTime)}',
//           //       PdfStandardFont(PdfFontFamily.helvetica, 12),
//           //       bounds: Rect.fromLTWH(0, yValue, 250, 30));
//           //   yValue += 35;
//           // }
//
//           if (image1Path != null) {
//             var response = await get(Uri.parse(image1Path));
//             var data = response.bodyBytes;
//             page.graphics.drawString(
//                 'Issue Image:', PdfStandardFont(PdfFontFamily.helvetica, 12),
//                 bounds: Rect.fromLTWH(0, 325, 200, 25));
//             page.graphics
//                 .drawImage(PdfBitmap(data), Rect.fromLTWH(0, 350, 250, 250));
//           }
//
//           if (image2Path != null) {
//             var response = await get(Uri.parse(image2Path));
//             var data = response.bodyBytes;
//             page.graphics.drawString('Image after diagnose:',
//                 PdfStandardFont(PdfFontFamily.helvetica, 12),
//                 bounds: Rect.fromLTWH(300, 325, 200, 25));
//             page.graphics
//                 .drawImage(PdfBitmap(data), Rect.fromLTWH(300, 350, 250, 250));
//           }
//
//           page.graphics.drawString('Place: ${details.equipment?.address ?? ""}',
//               PdfStandardFont(PdfFontFamily.helvetica, 12),
//               bounds: Rect.fromLTWH(16, height - 200, 350, 50));
//
//           var dateTimeStr = DateTime.now().toString();
//
//           page.graphics.drawString('Date: ${dateTimeStr}',
//               PdfStandardFont(PdfFontFamily.helvetica, 12),
//               bounds: Rect.fromLTWH(width - 200, height - 150, 200, 50));
//
//           List<int> bytes = document.save();
//           document.dispose();
//
//           saveAndLaunchFile(bytes, '${dateTimeStr}.pdf');
//         },
//         loadingWidget: getCommonProgressWidget(),
//         opacity: 0.7);
//   }
//
//   Future<Uint8List> _readImageData(String name) async {
//     final data = await rootBundle.load('images/$name');
//     return data.buffer.asUint8List(data.offsetInBytes, data.lengthInBytes);
//   }
//
//   Future<void> saveAndLaunchFile(List<int> bytes, String fileName) async {
//     final path = (await getExternalStorageDirectory())?.path;
//     final file = File('$path/$fileName');
//     await file.writeAsBytes(bytes, flush: true);
//     OpenFile.open('$path/$fileName');
//   }
// }
