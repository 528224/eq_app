import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';

import '../../FirebaseManager/UserManager.dart';
import '../../common/AppTheme.dart';
import '../../common/CommonWidgets.dart';
import '../../common/Constants.dart';
import '../../common/DataClasses.dart';
import '../../common/Extentions.dart';
import '../../common/globalFunctions.dart';
import '../Controller/ScheduleRequestController.dart';
import '../Model/RequestDetails.dart';

class ScheduleRequestWidget extends StatelessWidget {
  late RequestDetails details;

  ScheduleRequestWidget(this.details);

  ScheduleRequestController controller = Get.put(ScheduleRequestController());

  @override
  Widget build(BuildContext context) {
    controller.details = details;
    _getList();
    return SafeArea(
      child: Scaffold(
        appBar: AppBar(title: Text('Schedule Maintenance')),
        body: SingleChildScrollView(
          child: Container(
            // padding: const EdgeInsets.all(16.0),
            child: Form(
              key: controller.requestFormKey,
              child: _getBody(),
            ),
          ),
        ),
      ),
    );
  }

  _getBody() {
    return Column(
      mainAxisAlignment: MainAxisAlignment.start,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        getCommonSectionHeaderWidget(details.title, Alignment.center),
        getCommonLabelWidget(details.getReferenceNumberText(), 'Ref.No'),
        getCommonLabelWidget(
            getStringFromTimestamp(details.createdDate), CCreatedDate),
        getCommonLabelWidget(details.equipment?.name, CEquipmentName),
        getCommonLabelWidget(details.getAutogeneratedText(), CAutoGenerated),
        getCommonLabelWidget(details.getShortStatusText(), CStatus),
        if (details.isAutoGenerated)
          getCommonLabelWidget(
              getStringFromTimestamp(
                  details.equipment?.lastAutoCreatedServiceDiagnisedDate),
              CLastPeriodicServiceDate),
        if (details.isAutoGenerated)
          getCommonLabelWidget(
              details.equipment?.scheduleMaintenancePeriodInDays,
              CScheduledMaintenancePeriodDays),
        if (details.isAutoGenerated)
          getCommonLabelWidget(
              getDaysSince(
                      details.equipment?.lastAutoCreatedServiceDiagnisedDate)
                  .toString(),
              CDaysSinceLastScheduledMaintenance),
        if (details.description.isNotEmpty == true)
          getCommonSectionWidget('Issue Details', details.description),
        if (details.requestPhotoUrls.isNotEmpty == true)
          getCommonBackgroundWidget(16.0),
        if (details.requestPhotoUrls.isNotEmpty == true)
          getRemoteImageViewWidget(details.requestPhotoUrls.first),
        if (details.requestVideoUrls.isNotEmpty == true)
          getRemoteVideoWidget(details.requestVideoUrls.first),
        if (details.equipment?.address.isNotEmpty == true)
          getCommonBackgroundWidget(24.0),
        if (details.equipment?.address.isNotEmpty == true)
          getCommonSectionWidget(CAddress, details.equipment?.address ?? ""),
        getCommonBackgroundWidget(24.0),
        getCommonSectionHeaderWidget(
            'Set Planned Schedule Date', Alignment.center),
        if (isNotAppleTester())
          Padding(
            padding: EdgeInsets.only(left: 12, right: 12),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: <Widget>[
                Text(
                  CServiceEngineer,
                  style: TextStyle(
                    fontSize: 15,
                    color: Colors.blueGrey,
                    fontWeight: FontWeight.normal,
                  ),
                ),
                _getServiceManagerDropDown(),
              ],
            ),
          ),
        const SizedBox(height: defaultPadding * 1),
        getCommonDateSelectionPicker(
            controller.scheduledServiceDateWrapper, CScheduledDate, false),
        const SizedBox(height: defaultPadding * 1),
        Container(
          child: Column(
            children: [
              getCommonBackgroundWidget(24.0),
              getCommonExpandedButton("Schedule Visit", controller.saveAction),
              getCommonBackgroundWidget(24.0),
              getCommonExpandedButton(
                  "Mark As Ignored", controller.ignoreAction, false),
              getCommonBackgroundWidget(24.0),
            ],
          ),
        )
      ],
    );
  }

  _getList() async {
    var users = await getUserList(UserRoles.serviceEngineer);
    controller.serviceEngineers.value = users;
  }

  _getServiceManagerDropDown() {
    return Obx(() {
      if (controller.serviceEngineers.isEmpty) return getCommonProgressWidget();

      if (controller.selectedServiceEngineer.value.uuid == null)
        controller.selectedServiceEngineer.value =
            controller.serviceEngineers[0];

      return DropdownButton(
        hint: Text(
          'Select User Manager',
          style: AppTextStyles().kTextStyleWithFont,
        ),
        onChanged: (newValue) {
          controller.changeEngineer(newValue);
        },
        value: controller.selectedServiceEngineer.value,
        items: controller.serviceEngineers.map((UserDetails item) {
          return DropdownMenuItem(
            child: new Text(
              item.name,
            ),
            value: item,
          );
        }).toList(),
      );
    });
  }
}
